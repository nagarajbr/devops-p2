AWSTemplateFormatVersion: 2010-09-09
Description: Udacity DevOps Project 2 - High Availability Web App Using CloudFormation

Parameters:
  Environment:
    Description: Env-Name
    Type: String
    Default: Udacity-DevOps-Project2-Dev

  ProjectName:
    Description: Proj-Name
    Type: String
    Default: Udacity-DevOps-Project2-HA-WebSite

  UdaDevOpsP2WebServerImageId:
    Description: Web Application Server Image Id should be Ubuntu OS v18
    Type: String
    Default: ami-0747bdcabd34c712a
  
  UdaDevOpsP2WebServerInstanceType:
    Description: Web Application Server Image Id with 2 vCPUs and at least 4GB of RAM
    Type: String
    Default: t2.medium

Resources:
  UdaDevOpsP2s3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # Instance profile with IAM role that creates the EC2 with the ability to assume role to read s3 resource.
  UdaDevOpsP2WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdaDevOpsP2s3ReadOnlyEC2

  # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch configuration
  # that can be used by an Auto Scaling group to configure Amazon EC2 instances
  UdaDevOpsP2WebAppServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref UdaDevOpsP2WebServerImageId
      IamInstanceProfile: !Ref UdaDevOpsP2WebAppInstanceProfile
      SecurityGroups:
      - Fn::ImportValue:
          !Sub "${ProjectName}-WebAppSecurityGroupID"
      InstanceType: !Ref UdaDevOpsP2WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
          DeleteOnTermination: true
          VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://uda-devops-p2/udacity.zip .
          unzip -o udacity.zip

  # Describe Application Load Balancer for checking the health of the EC2 instances
  # in the target group; ping the root using HTTP; and related configuration points

  UdaDevOpsP2WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"

  # Described EC2 instances and subnet location of the web app servers. In this project, 
  # the webapp servers are to be placed in private subnets
  UdaDevOpsP2WebAppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Private Subnets
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${ProjectName}-Private-Subnet-IDs
      LaunchConfigurationName: !Ref UdaDevOpsP2WebAppServerLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: UdaDevOpsP2WebAppTargetGroup
      Tags:
        - Key: Name
          Value: UdaDevOpsP2-EC2-Instance
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true

  # Describe the Application Load Balancer to be configured such that it is 
  # internet facing (public subnet) but will point to the ec2 instances in 
  # the private subnet
  UdaDevOpsP2ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${ProjectName}-Public-Subnet-1
      - Fn::ImportValue: !Sub ${ProjectName}-Public-Subnet-2
      SecurityGroups:
      - Fn::ImportValue: !Sub ${ProjectName}-ELBSecurityGroupID
      Tags:
        - Key: Name
          Value: UdaDevOpsP2-ELB
        - Key: Project
          Value: !Ref ProjectName

  # The load balancer should be listening on HTTP/port 80 and forward requests to
  # target web app servers in the target group used for auto scale
  UdaDevOpsP2ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref UdaDevOpsP2WebAppTargetGroup
      LoadBalancerArn: !Ref UdaDevOpsP2ElasticLoadBalancer
      Port: '80'
      Protocol: HTTP

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref UdaDevOpsP2WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref UdaDevOpsP2ELBListener
      Priority: 1

  # Describe the policy type for scaling (we have configured the parameter for the CPU utilization threshold)
  # the autoscaling policy will apply this policy on the target launch config group, as well as incorporate
  # the ELB initiated health checks
  UdaDevOpsP2AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref UdaDevOpsP2WebAppServerGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: 1
  
  UdaDevOpsP2AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref UdaDevOpsP2WebAppServerGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 300
      ScalingAdjustment: -1
  
  CPUUsageAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Period: 300
      Statistic: Average
      Namespace: AWS/EC2
      Threshold: 90
      AlarmName: 'CPUUSAGEHIGHALARM'
      AlarmActions:
      - !Ref UdaDevOpsP2AppScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroup
          Value: !Ref UdaDevOpsP2WebAppServerGroup
  
  CPUUsageAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Period: 300
      Statistic: Average
      Namespace: AWS/EC2
      Threshold: 50
      AlarmName: 'CPUUSAGELOWALARM'
      AlarmActions:
      - !Ref UdaDevOpsP2AppScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroup
          Value: !Ref UdaDevOpsP2WebAppServerGroup


  # Capture Outputs from this stack
Outputs:
  DNS:
    Description: ELB becomes the internet facing endpoint/URL
    Value:
      !Sub
        - 'http://${DNSName}'
        - {DNSName: !GetAtt 'UdaDevOpsP2ElasticLoadBalancer.DNSName'}
    Export:
      Name: !Sub "${ProjectName}-URL"