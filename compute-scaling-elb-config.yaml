AWSTemplateFormatVersion: 2010-09-09
Description: Udacity DevOps Project 2 - High Availability Web App Using CloudFormation

Parameters:
	Environment:
		Description: EnvName
		Type: String
		Default: Udacity-DevOps-Project2-Dev

	ProjectName:
		Description: Project name
		Type: String
		Default: Udacity-DevOps-Project2-HA-WebSite

	UdaDevOpsP2WebServerImageId:
		Description: Web Application Server Image Id should be Ubuntu OS v18 
		Type: String
		Default: t2.medium

	UdaDevOpsP2WebServerInstanceType:
		Description: Web Application Server Image Id with 2 vCPUs and at least 4GB of RAM
		Type: String
		Default: ami-0747bdcabd34c712a

	UdaDevOpsP2CPUUsageTargetForSclaing:
		Description: Target Percentage for CPU Utilization to trigger new launch instance in Auto Scaling
		Type: String
		Default: 90.0

Resources:
	# EC2-S3 service policy for appropriate access and role; will be referenced in EC2 Instance profile
	
	UdaDevOpsP2s3ReadOnlyEC2:
		Type: AWS::IAM::Role
		Properties:
			ManagedPolicyArns:
				- "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
			AssumeRolePolicyDocument:
				Version: "2012-10-17"
				Statement:
					-
						Effect: "Allow"
						Principal:
							Service:
								- "ec2.amazonaws.com"
						Action:
							- "sts:AssumeRole"
			Path: "/"

	# Instance profile with IAM role that creates the EC2 with the ability to assume role to read s3 resource.
	UdaDevOpsP2WebAppInstanceProfile:
		Type: AWS::IAM::InstanceProfile
		Properties:
			Path: "/"
			Roles:
				- !Ref UdaDevOpsP2s3ReadOnlyEC2

	# The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch configuration
	# that can be used by an Auto Scaling group to configure Amazon EC2 instances
	UdaDevOpsP2WebAppServerLaunchConfig:
		Type: AWS::AutoScaling::LaunchConfiguration
		Properties:
			UserData:
				Fn::Base64: !Sub |
					#!/bin/bash
					apt-get update -y
					apt-get install unzip awscli -y
					apt-get install apache2 -y
					systemctl start apache2.service
					cd /var/www/html
					aws s3 cp s3://uda-devops-p2/udacity.zip .
					unzip -o udacity.zip
			ImageId: !Ref UdaDevOpsP2WebServerImageId
			IamInstanceProfile: !Ref UdaDevOpsP2WebAppInstanceProfile
			SecurityGroups:
			- Fn::ImportValue:
					!Sub "${Project}-AppSecurityGroupID"
			InstanceType: !Ref UdaDevOpsP2WebServerInstanceType
			BlockDeviceMappings:
			- DeviceName: "/dev/sdk"
				Ebs:
					VolumeSize: '10'
					DeleteOnTermination: true

	# Describe Application Load Balancer for checking the health of the EC2 instances
	# in the target group; ping the root using HTTP; and related configuration points

	UdaDevOpsP2WebAppTargetGroup:
		Type: AWS::ElasticLoadBalancingV2::TargetGroup
		Properties:
			HealthCheckIntervalSeconds: 10
			HealthCheckPath: /
			HealthCheckProtocol: HTTP
			HealthCheckTimeoutSeconds: 8
			HealthyThresholdCount: 2
			Port: 80
			Protocol: HTTP
			UnhealthyThresholdCount: 5
		VpcId:
			Fn::ImportValue:
				Fn::Sub: "${Project}-VPCID"

	# Described EC2 instances and subnet location of the web app servers. In this project, 
	# the webapp servers are to be placed in private subnets
	UdaDevOpsP2WebAppServerGroup:
		Type: AWS::AutoScaling::AutoScalingGroup
		Properties:
			# Private Subnets
			VPCZoneIdentifier:
				- Fn::ImportValue: !Sub ${Project}-Private-Subnet-IDs
			LaunchConfigurationName: !Ref UdaDevOpsP2WebAppServerLaunchConfig
			MinSize: '2'
			MaxSize: '4'
			TargetGroupARNs:
			- Ref: UdaDevOpsP2WebAppTargetGroup
			Tags:
				- Key: Name
					Value: UdaDevOpsP2-EC2-Instance
					PropagateAtLaunch: true
				- Key: Project
					Value: !Ref ProjectName
					PropagateAtLaunch: true

	# Describe the Application Load Balancer to be configured such that it is 
	# internet facing (public subnet) but will point to the ec2 instances in 
	# the private subnet
	UdaDevOpsP2ElasticLoadBalancer:
		Type: AWS::ElasticLoadBalancingV2::LoadBalancer
		Properties:
			Subnets:
			- Fn::ImportValue: !Sub ${Project}-Public-Subnet-1-ID
			- Fn::ImportValue: !Sub ${Project}-Public-Subnet-2-ID
			SecurityGroups:
			- Fn::ImportValue: !Sub ${Project}-LBSecurityGroupID
			Tags:
				- Key: Name
					Value: UdaDevOpsP2-ELB
				- Key: Project
					Value: !Ref ProjectName

	# The load balancer should be listening on HTTP/port 80 and forward requests to
	# target web app servers in the target group used for auto scale
	UdaDevOpsP2ELBListener:
		Type: AWS::ElasticLoadBalancingV2::Listener
		Properties:
			DefaultActions:
			- Type: forward
				TargetGroupArn: !Ref UdaDevOpsP2WebAppTargetGroup
			LoadBalancerArn: !Ref UdaDevOpsP2ElasticLoadBalancer
			Port: '80'
			Protocol: HTTP

	LoadBalancerListenerRule:
		Type: AWS::ElasticLoadBalancingV2::ListenerRule
		Properties:
			Actions:
			- Type: forward
				TargetGroupArn: !Ref UdaDevOpsP2WebAppTargetGroup
			Conditions:
			- Field: path-pattern
				Values: [/]
			ListenerArn: !Ref UdaDevOpsP2ELBListener
			Priority: 1

	# Describe the policy type for scaling (we have configured the parameter for the CPU utilization threshold)
	# the autoscaling policy will apply this policy on the target launch config group, as well as incorporate
	# the ELB initiated health checks
	UDADevOpsP2WebAppServerCPUPolicy:
		Type: AWS::AutoScaling::ScalingPolicy
		Properties:
			AutoScalingGroupName: !Ref UdaDevOpsP2WebAppTargetGroup
			PolicyType: TargetTrackingScaling
			TargetTrackingConfiguration:
				PredefinedMetricSpecification:
					PredefinedMetricType: ASGAverageCPUUtilization
				TargetValue: !Ref CPUUsagePercentPolicyTargetValue

	UDADevOpsP2WebAppServerCountPolicy:
		Type: AWS::AutoScaling::ScalingPolicy
		Properties:
			AutoScalingGroupName: !Ref UdaDevOpsP2WebAppTargetGroup
			PolicyType: TargetTrackingScaling
			TargetTrackingConfiguration:
				PredefinedMetricSpecification:
					PredefinedMetricType: ALBRequestCountPerTarget
					ResourceLabel: !Join
						- '/'
						- - !GetAtt WebAppLoadBalancer.LoadBalancerFullName
							- !GetAtt WebAppTargetGroup.TargetGroupFullName
				TargetValue: !Ref ALBRequestCompleteCountTargetValue

# Capture Outputs from this stack
Outputs:
	DNS:
		Description: ELB becomes the internet facing endpoint/URL
		Value:
			!Sub
				- 'http://${DNSName}'
				- {DNSName: !GetAtt 'WebAppLoadBalancer.DNSName'}
		Export:
			Name: !Sub "${ProjectName}-URL"
